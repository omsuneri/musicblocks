name: Syntax Check on PR

on:
  pull_request:
    branches: [master]

jobs:
  syntax-check:
    name: Check syntax errors in changed files
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch full commit history

      - name: Fetch base branch
        run: git fetch origin master --depth=1

      - name: Get changed JavaScript files
        id: changed-files
        run: |
          CHANGED_FILES=$(git diff --diff-filter=d --name-only ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} -- '*.js')
          
          # Convert newlines to spaces to prevent formatting errors
          CHANGED_FILES=$(echo "$CHANGED_FILES" | tr '\n' ' ')

          echo "files=$CHANGED_FILES" >> $GITHUB_ENV
          
      - name: Install ESLint
        run: npm install eslint

      - name: Run ESLint and capture syntax errors
        id: eslint-check
        run: |
          ERROR_FOUND=false
          COMMENTS=""

          for file in ${{ env.files }}; do
            echo "Checking syntax in: $file"

            # Run ESLint and capture output
            OUTPUT=$(npx eslint --no-ignore --ext .js --format json "$file" || echo "[]")
            
            # Print ESLint output for debugging
            echo "ESLint Output: $OUTPUT"

            # Ensure JSON is valid before processing
            if [[ "$OUTPUT" == "[]" ]]; then
              continue
            fi

            # Detect if ESLint found errors
            ERROR_COUNT=$(echo "$OUTPUT" | jq 'map(select(.messages | length > 0)) | length')

            if [[ "$ERROR_COUNT" -gt 0 ]]; then
              ERROR_FOUND=true

              # Extract errors and format comments
              echo "$OUTPUT" | jq -c '.[]' | while IFS= read -r error; do
                FILE=$(echo "$error" | jq -r '.filePath')

                echo "$error" | jq -c '.messages[] | select(.fatal == true)' | while IFS= read -r msg; do
                  LINE=$(echo "$msg" | jq -r '.line')
                  MESSAGE=$(echo "$msg" | jq -r '.message')

                  COMMENTS+=$(printf "%s\n" "{\"path\":\"$FILE\",\"position\":$LINE,\"body\":\"Please correct the syntax error on line $LINE: $MESSAGE\"},")
                done
              done
            fi
          done

          echo "COMMENTS=[${COMMENTS%,}]" >> $GITHUB_ENV
          echo "ERROR_FOUND=$ERROR_FOUND" >> $GITHUB_ENV

          # **Fix for syntax error when evaluating ERROR_FOUND**
          if [[ "$ERROR_FOUND" == "true" ]]; then
            echo "Syntax errors detected!"
            exit 1
          fi

      - name: Comment on PR if syntax errors are found
        if: env.ERROR_FOUND == 'true'
        run: |
          PR_NUMBER=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")

          PAYLOAD=$(jq -n --argjson comments "[${COMMENTS%,}]" '{comments: $comments}')

          echo "Sending review comments..."
          curl -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
               -H "Accept: application/vnd.github.v3+json" \
               https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER/reviews \
               -d "$PAYLOAD"

      - name: Comment "All OK" if no errors
        if: env.ERROR_FOUND == 'false'
        run: |
          PR_NUMBER=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")

          curl -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
               -H "Accept: application/vnd.github.v3+json" \
               -d '{"body": "âœ… No syntax errors found! Great job!"}' \
               https://api.github.com/repos/${{ github.repository }}/issues/$PR_NUMBER/comments
