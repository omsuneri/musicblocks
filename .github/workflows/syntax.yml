name: ESLint Syntax Check

on:
  pull_request:
    branches: [master]

jobs:
  lint:
    name: Check for Syntax Errors
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Ensures full history for correct diff

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Install dependencies
        run: npm install eslint

      - name: Get changed JavaScript files
        id: get_files
        run: |
          git fetch --no-tags --prune --depth=1 origin ${{ github.base_ref }} ${{ github.head_ref }}
          FILES=$(git diff --diff-filter=d --name-only ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} -- '*.js')
          echo "CHANGED_FILES=$FILES" >> $GITHUB_ENV
          echo "Changed files: $FILES"

      - name: Run ESLint and collect errors
        id: eslint_check
        run: |
          ERROR_FOUND=false
          COMMENTS=""

          for FILE in $CHANGED_FILES; do
            echo "Checking: $FILE"
            OUTPUT=$(npx eslint --no-ignore --ext .js --format json "$FILE" || echo "[]")

            ERROR_COUNT=$(echo "$OUTPUT" | jq 'map(.messages | length) | add')

            if [[ "$ERROR_COUNT" -gt 0 ]]; then
              ERROR_FOUND=true
              echo "$OUTPUT" | jq -c '.[] | {filePath: .filePath, messages: .messages[]}' | while read -r LINE; do
                FILE_PATH=$(echo "$LINE" | jq -r '.filePath' | sed "s|$GITHUB_WORKSPACE/||")
                LINE_NUM=$(echo "$LINE" | jq -r '.messages.line')
                ERROR_MSG=$(echo "$LINE" | jq -r '.messages.message')

                COMMENT="{\"path\": \"$FILE_PATH\", \"position\": $LINE_NUM, \"body\": \"❌ Syntax error on line $LINE_NUM: $ERROR_MSG\"}"
                COMMENTS+="$COMMENT,"
              done
            fi
          done

          echo "ERROR_FOUND=$ERROR_FOUND" >> $GITHUB_ENV
          echo "COMMENTS=[${COMMENTS%,}]" >> $GITHUB_ENV
          echo "Final ERROR_FOUND: $ERROR_FOUND"
          echo "Final COMMENTS: $COMMENTS"

          if [[ "$ERROR_FOUND" == "true" ]]; then
            exit 1
          fi

      - name: Comment on PR if errors exist
        if: env.ERROR_FOUND == 'true'
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          PAYLOAD=$(jq -n --argjson comments "$COMMENTS" '{comments: $comments}')

          curl -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
               -H "Accept: application/vnd.github.v3+json" \
               -d "$PAYLOAD" \
               https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER/reviews

      - name: Post "All OK" comment if no errors
        if: env.ERROR_FOUND == 'false'
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}

          curl -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
               -H "Accept: application/vnd.github.v3+json" \
               -d '{"body": "✅ No syntax errors found! Great job!"}' \
               https://api.github.com/repos/${{ github.repository }}/issues/$PR_NUMBER/comments
